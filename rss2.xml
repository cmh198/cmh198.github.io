<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CMH&#39;s BLOG</title>
    <link>https://cmh198.github.io/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/12cbd2df890786e953515c65f9734b2a</url>
      <title>CMH&#39;s BLOG</title>
      <link>https://cmh198.github.io/</link>
    </image>
    
    <atom:link href="https://cmh198.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개발은 꾸준히</description>
    <pubDate>Mon, 04 Oct 2021 13:07:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>https://cmh198.github.io/2021/10/04/test/</link>
      <guid>https://cmh198.github.io/2021/10/04/test/</guid>
      <pubDate>Mon, 04 Oct 2021 13:07:28 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h3&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3>]]></content:encoded>
      
      
      
      
      <comments>https://cmh198.github.io/2021/10/04/test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MIPS Processor</title>
      <link>https://cmh198.github.io/2021/01/10/MIPS%20Processor/</link>
      <guid>https://cmh198.github.io/2021/01/10/MIPS%20Processor/</guid>
      <pubDate>Sun, 10 Jan 2021 03:34:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;MIPS-Processor의-원리&quot;&gt;&lt;a href=&quot;#MIPS-Processor의-원리&quot; class=&quot;headerlink&quot; title=&quot;MIPS Processor의 원리&quot;&gt;&lt;/a&gt;MIPS Processor의 원리&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="MIPS-Processor의-원리"><a href="#MIPS-Processor의-원리" class="headerlink" title="MIPS Processor의 원리"></a>MIPS Processor의 원리</h2><ul><li>MIPS 프로세서에서 Instruction을 실행하는 과정은 크게 5 Stage가 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF -&gt; ID -&gt; EX -&gt; MEM -&gt; WB</span><br></pre></td></tr></table></figure></li><li>IF: Instruction Fetch 메모리(DRAM)으로부터 Instruction 한 줄(32bit)을 가져온다.</li><li>ID: Instruction Decode 가져온 Instruction을 Decode하고 레지스터로부터 값을 가져온다.</li><li>EX: Execute 레지스터로부터 가져온 값으로 연산을 한다.</li><li>MEM: Memory Write 메모리로부터 데이터를 불러오거나 저장하는 작업을 한다 EX. lw, sw</li><li>WB: Write Back 연산을 끝낸 값을 저장할 레지스터에 접근하여 레지스터에 값을 저장한다.</li></ul><h2 id="Instruction의-종류"><a href="#Instruction의-종류" class="headerlink" title="Instruction의 종류"></a>Instruction의 종류</h2><ol><li>R-Format</li></ol><ul><li></li></ul><ol start="2"><li>I-Format</li></ol><ul><li></li></ul><ol start="3"><li>J-Format</li></ol><p>- </p>]]></content:encoded>
      
      
      <category domain="https://cmh198.github.io/categories/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      
      <category domain="https://cmh198.github.io/tags/MIPS/">MIPS</category>
      
      
      <comments>https://cmh198.github.io/2021/01/10/MIPS%20Processor/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Branch Prediction</title>
      <link>https://cmh198.github.io/2021/01/08/Branch%20Prediction/</link>
      <guid>https://cmh198.github.io/2021/01/08/Branch%20Prediction/</guid>
      <pubDate>Thu, 07 Jan 2021 16:06:18 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Branch-Prediction&quot;&gt;&lt;a href=&quot;#Branch-Prediction&quot; class=&quot;headerlink&quot; title=&quot;Branch Prediction&quot;&gt;&lt;/a&gt;Branch Prediction&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Bran</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Branch-Prediction"><a href="#Branch-Prediction" class="headerlink" title="Branch Prediction"></a>Branch Prediction</h2><ul><li>Branch할 곳을 미리 예측하여 instruction을 미리 가져옴.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add $t0 $s1 $s2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>test</li></ul>]]></content:encoded>
      
      
      <category domain="https://cmh198.github.io/categories/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      
      <category domain="https://cmh198.github.io/tags/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/tags/Branch-Prediction/">Branch Prediction</category>
      
      
      <comments>https://cmh198.github.io/2021/01/08/Branch%20Prediction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Instruction-Level Parallelism</title>
      <link>https://cmh198.github.io/2021/01/06/ILP/</link>
      <guid>https://cmh198.github.io/2021/01/06/ILP/</guid>
      <pubDate>Wed, 06 Jan 2021 08:43:21 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;ILP&quot;&gt;&lt;a href=&quot;#ILP&quot; class=&quot;headerlink&quot; title=&quot;ILP&quot;&gt;&lt;/a&gt;ILP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ILP의 핵심은 instruction간의 dependency를 찾는 것이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="ILP"><a href="#ILP" class="headerlink" title="ILP"></a>ILP</h2><ul><li>ILP의 핵심은 instruction간의 dependency를 찾는 것이다. </li></ul><hr><h2 id="Instruction-간의-의존성이-있는-경우"><a href="#Instruction-간의-의존성이-있는-경우" class="headerlink" title="Instruction 간의 의존성이 있는 경우"></a>Instruction 간의 의존성이 있는 경우</h2><ul><li>아래 MIPS 코드를 잘 살펴보면,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add $t0 $s1 $s2</span><br><span class="line">add $t1 $t0 $s3</span><br><span class="line">add $t2 $t1 $t0</span><br></pre></td></tr></table></figure></li><li>Line 1과 Line 2가 서로 의존성이 있음을 알 수 있다. 즉, Line2에서는 Line 1의 결과가 나와야만 원하는 연산이 가능하기 때문에 한 번 stall을 해야한다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://cmh198.github.io/categories/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      
      <category domain="https://cmh198.github.io/tags/ILP/">ILP</category>
      
      
      <comments>https://cmh198.github.io/2021/01/06/ILP/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Virtual Memory</title>
      <link>https://cmh198.github.io/2021/01/03/VM/</link>
      <guid>https://cmh198.github.io/2021/01/03/VM/</guid>
      <pubDate>Sun, 03 Jan 2021 10:07:33 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Virtual-Memory&quot;&gt;&lt;a href=&quot;#Virtual-Memory&quot; class=&quot;headerlink&quot; title=&quot;Virtual Memory&quot;&gt;&lt;/a&gt;Virtual Memory&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;가상 메모리는 프로그래머가 메</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h2><ul><li>가상 메모리는 프로그래머가 메모리를 관리하기 쉽게 만들기 위한 메모리 시스템이다.</li></ul>]]></content:encoded>
      
      
      <category domain="https://cmh198.github.io/categories/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/Virtual-Memory/">Virtual Memory</category>
      
      
      <category domain="https://cmh198.github.io/tags/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      <category domain="https://cmh198.github.io/tags/%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC/">가상 메모리</category>
      
      <category domain="https://cmh198.github.io/tags/Virtual-Memory/">Virtual Memory</category>
      
      
      <comments>https://cmh198.github.io/2021/01/03/VM/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cache</title>
      <link>https://cmh198.github.io/2021/01/03/Cache/</link>
      <guid>https://cmh198.github.io/2021/01/03/Cache/</guid>
      <pubDate>Sun, 03 Jan 2021 10:07:33 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Cache란-무엇인가&quot;&gt;&lt;a href=&quot;#Cache란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;Cache란 무엇인가?&quot;&gt;&lt;/a&gt;Cache란 무엇인가?&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Cache는 CPU와 메인 메모리 사이</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Cache란-무엇인가"><a href="#Cache란-무엇인가" class="headerlink" title="Cache란 무엇인가?"></a>Cache란 무엇인가?</h2><hr><ul><li>Cache는 CPU와 메인 메모리 사이에 존재하고, CPU가 데이터에 접근할 때 마다 메인 메모리까지 가기에는 cost가 너무 크기 때문에 그 사이에 Cache를 두어 자주 사용하는 data를 저장해 놓고 CPU는 특정 데이터가 필요할 때 그 데이터가 Cache에 있는지 우선적으로 탐색한다. 만약 찾지 못했다면 miss 처리를 한 뒤 메모리에서 그 데이터를 Cache에 적재한다.</li></ul><p><img src="https://user-images.githubusercontent.com/29699750/104117657-530c0b80-5366-11eb-97e6-5a83597ba1fb.PNG" alt="메모리 Hierachy"></p><h2 id="Locality의-원리"><a href="#Locality의-원리" class="headerlink" title="Locality의 원리"></a>Locality의 원리</h2><ul><li>캐시에 데이터를 적재할 때 어떤 기준을 두고 적재하게 된다. 그 기준이 바로 Locality이다. Locality는 두 가지 종류가 있는데 시간 지역성과 공간 지역성이 있다.</li><li>Temporal Locality<ul><li>시간 지역성은 최근 접근한 데이터를 다시 접근할 확률이 높음을 뜻한다.</li></ul></li><li>Spatial Locality<ul><li>공간 지역성은 접근한 데이터의 주변(메모리 주소와 인접한)을 다시 접근할 확률이 높음을 뜻한다.</li></ul></li></ul><hr><h2 id="Cache-miss"><a href="#Cache-miss" class="headerlink" title="Cache miss"></a>Cache miss</h2><ol><li>Conpulsory miss(Cold miss)</li></ol><ul><li>캐시를 맨 처음 접근할 때 발생하는 miss <ul><li>초기 상태의 캐시는 비어있기 때문에 miss가 반드시 발생한다.(피할 수 없다)</li></ul></li></ul><ol start="2"><li>Capacity miss</li></ol><ul><li>Capacity가 부족해서 발생하는 miss<ul><li>교체 정책(replacement policy)을 통해 사용한지 오래된 데이터는 바꿔준다.</li></ul></li></ul><ol start="3"><li>Conflict miss</li></ol><ul><li>Direct-mapped Cache에서 발생하는 miss이다. <ul><li>두 데이터를 저장할 때 같은 index를 가리킨다면 어떤 데이터를 저장할지 컴퓨터는 모르기 때문에 발생한다.</li><li><blockquote><p>way가 부족해서 나타나는 현상이므로 way를 늘려준다.</p></blockquote></li></ul></li></ul><h2 id="Cache-ABC’s"><a href="#Cache-ABC’s" class="headerlink" title="Cache ABC’s"></a>Cache ABC’s</h2><ol><li>Associativity</li><li>Block size</li><li>Capacity</li></ol><h2 id="Cache의-특징"><a href="#Cache의-특징" class="headerlink" title="Cache의 특징"></a>Cache의 특징</h2><ul><li><p>하드웨어가 관리한다. 하드웨어가 miss한 data를 검색한다.</p></li><li><p>Hit latency: data를 hit 하는데 걸리는 시간, 일반적으로 L2,L3 Cache는 Hit latency가 길다.(miss rate를 줄이는데 중점을 두고 설계하였기 때문)</p></li><li><p>Miss rate = cache misses / cache accesses</p></li><li><p>Miss latency: 다음 level의 cache나 메모리로부터 fetch하는데 걸리는 시간</p></li><li><p>Cache의 성능을 개선시키려면 어떻게 해야할까?</p><ul><li>hit latency를 줄인다. -&gt; Cache size를 작게 한다.</li><li>miss rate를 줄인다. -&gt; Cache size를 크게 한다.</li><li>miss latency를 줄인다. -&gt; 더 좋은 lower-level cache/memory를 사용한다.</li></ul></li></ul><h2 id="Cache의-진화"><a href="#Cache의-진화" class="headerlink" title="Cache의 진화"></a>Cache의 진화</h2><ul><li>최근 CPU의 die photo를 보면, 전체 면적의 30~70%를 Cache가 차지한다. 이러한 이유는 Processor와 Ram간의 성능 차이가 점점 커지는 것을 보완하기 위해 그 사이에 위치한 Cache를 늘리는 것이다.<br><img src="https://user-images.githubusercontent.com/29699750/107242496-626a9b80-6a6f-11eb-89bf-14f011eaa9d6.png" alt="Die Photo"></li></ul>]]></content:encoded>
      
      
      <category domain="https://cmh198.github.io/categories/CS/">CS</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      <category domain="https://cmh198.github.io/categories/CS/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/Cache/">Cache</category>
      
      
      <category domain="https://cmh198.github.io/tags/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0/">컴퓨터 구조</category>
      
      <category domain="https://cmh198.github.io/tags/Cache/">Cache</category>
      
      <category domain="https://cmh198.github.io/tags/%EC%BA%90%EC%8B%9C/">캐시</category>
      
      
      <comments>https://cmh198.github.io/2021/01/03/Cache/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
